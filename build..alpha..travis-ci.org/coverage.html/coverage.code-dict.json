{"/home/travis/build/npmtest/node-npmtest-gulp-chug/test.js":"/* istanbul instrument in package npmtest_gulp_chug */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-chug/lib.npmtest_gulp_chug.js":"/* istanbul instrument in package npmtest_gulp_chug */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gulp_chug = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gulp_chug = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-chug/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gulp-chug && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gulp_chug */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gulp_chug\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gulp_chug.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_gulp_chug.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gulp_chug.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_gulp_chug.__dirname + '/lib.npmtest_gulp_chug.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-chug/node_modules/gulp-chug/index.js":"'use strict';\n\nvar fs          = require( 'fs' );\nvar path        = require( 'path' );\nvar util        = require( 'util' );\nvar spawn       = require( 'child_process' ).spawn;\n\nvar _           = require( 'lodash' );\nvar through     = require( 'through2' );\nvar resolve     = require( 'resolve' );\nvar gutil       = require( 'gulp-util' );\nvar PluginError = gutil.PluginError;\n\nvar PKG         = require( './package.json' );\n\n// Primary gulp function\nmodule.exports = function ( options, userCallback ) {\n\n    // Consider `options` the callback if it's a function\n    if ( _.isFunction( options ) ) {\n        userCallback = options;\n        options = {};\n    }\n\n    // Set default options\n    var opts = _.assign( {\n        nodeCmd: 'node',\n        tasks: [ 'default' ]\n    }, options );\n\n    // Set the callback to a noop if it's not a function\n    userCallback = _.isFunction( userCallback ) ? userCallback : _.noop\n\n    // Create a stream through which each file will pass\n    return through.obj( function ( file, enc, callback ) {\n\n        // Grab reference to this through object\n        var self = this;\n\n        // Since we're not modifying the gulpfile, always push it back on the\n        // stream.\n        self.push( file );\n\n        // Configure logging and errors\n        var say = function( msg, noNewLine ) {\n            if ( !noNewLine ) {\n                return console.log(\n                    util.format( '[%s]', gutil.colors.green( PKG.name ) ), msg\n                );\n            }\n            process.stdout.write( util.format( '[%s]', gutil.colors.green( PKG.name ) ) + ' ' + msg )\n        };\n\n        var sayErr = function( errMsg ) {\n            self.emit( 'error', new PluginError( PKG.name, errMsg ) );\n        };\n\n        // Error if file contents is stream ( { buffer: false } in gulp.src )\n        // TODO: Add support for a streams\n        if ( file.isStream() ) {\n            sayErr( 'Streams are not supported yet. Pull requests welcome :)' );\n            return callback();\n        }\n\n        // Gather target gulpfile info\n        var gulpfile = {};\n        gulpfile.path       = file.path;\n        gulpfile.relPath    = path.relative( process.cwd(), gulpfile.path );\n        gulpfile.base       = path.dirname( file.path );\n        gulpfile.relBase    = path.relative( process.cwd(), gulpfile.base );\n        gulpfile.name       = path.basename( gulpfile.path );\n        gulpfile.ext        = path.extname( gulpfile.name );\n\n        // If file contents is null, { read: false }, just execute file as-is\n        // on disk\n        if( file.isNull() ){\n            say( util.format(\n                'Gulpfile, %s, contents is empty. Reading directly from disk...',\n                gulpfile.name\n            ) );\n        }\n\n        // If file contents is a buffer, write a temp file and run that instead\n        if( file.isBuffer() ) {\n\n            say( 'File is a buffer. Need to write buffer to temp file...' );\n\n            var tmpGulpfileName = util.format(\n                '%s.tmp.%s%s',\n                path.basename( gulpfile.name, gulpfile.ext ),\n                new Date().getTime(),\n                gulpfile.ext\n            );\n\n            // Tweak gulpfile info to account for temp file\n            gulpfile.origPath       = gulpfile.path;\n            gulpfile.path           = path.join( gulpfile.base, tmpGulpfileName );\n            gulpfile.tmpPath        = gulpfile.path;\n            gulpfile.origRelPath    = gulpfile.relPath;\n            gulpfile.relPath        = path.relative( process.cwd(), gulpfile.path );\n            gulpfile.name           = tmpGulpfileName;\n\n            say( util.format(\n                'Writing buffer to %s...',\n                gutil.colors.magenta( gulpfile.relPath )\n            ) );\n\n            // Write tmp file to disk\n            fs.writeFileSync( gulpfile.path, file.contents );\n        }\n\n        // Find local gulp cli script\n        var localGulpPackage        = null;\n        var localGulpPackageBase    = null;\n        var localGulpCliPath        = null;\n        try {\n            localGulpPackageBase    = path.dirname( resolve.sync( 'gulp', { basedir: gulpfile.base } ) );\n            localGulpPackage        = require( path.join( localGulpPackageBase, 'package.json' ) );\n            localGulpCliPath        = path.resolve( path.join( localGulpPackageBase, localGulpPackage.bin.gulp ) );\n        } catch( err ) {\n            sayErr( util.format(\n                'Problem finding locally-installed `gulp` for gulpfile %s. ' +\n                '(Try running `npm install gulp` from %s to install a local ' +\n                'gulp for said gulpfile.)\\n\\n%s',\n                gutil.colors.magenta( gulpfile.origPath ),\n                gutil.colors.magenta( gulpfile.base ),\n                err\n            ) );\n            return callback();\n        }\n\n        // Construct command and args\n        var cmd = opts.nodeCmd;\n\n        var args = [\n            localGulpCliPath, '--gulpfile', gulpfile.name\n        ].concat(opts.tasks);\n\n        // Concatinate additional command-line arguments if provided\n        if ( _.isArray( opts.args ) || _.isString( opts.args ) ) {\n            args = args.concat( opts.args );\n        }\n\n        say(\n            'Spawning process ' + gutil.colors.magenta( localGulpCliPath ) +\n            ' with args ' + gutil.colors.magenta( args.join( ' ' ) ) +\n            ' from directory ' + gutil.colors.magenta( gulpfile.base ) + '...'\n        );\n\n        // Execute local gulpfile cli script\n        var spawnedGulp = spawn( cmd, args, { cwd: gulpfile.base } );\n\n        // Log output coming from gulpfile stdout and stderr\n        var logGulpfileOutput = function ( data ) {\n            say( util.format( '(%s) %s',\n                gutil.colors.magenta( gulpfile.relPath ),\n                data.toString()\n            ), true );\n        };\n\n        // Remove temp file if one exists\n        var cleanupTmpFile = function () {\n            try {\n                if( gulpfile.tmpPath ) {\n                    say( util.format( 'Removing temp file %s', gulpfile.tmpPath ) );\n                    fs.unlinkSync( gulpfile.tmpPath );\n                }\n            } catch ( e ) {\n                // Wrap in try/catch because when executed due to ctrl+c,\n                // we can't unlink the file\n            }\n        };\n\n        // Handle errors in gulpfile\n        spawnedGulp.on( 'error', function ( error ) {\n            sayErr( util.format(\n                'Error executing gulpfile %s:\\n\\n%s',\n                gutil.colors.magenta( gulpfile.path ),\n                error\n            ) );\n        } );\n\n        // Handle gulpfile stdout and stderr\n        spawnedGulp.stdout.on( 'data', logGulpfileOutput );\n        spawnedGulp.stderr.on( 'data', logGulpfileOutput );\n\n        // Clean up temp gulpfile exit\n        spawnedGulp.on( 'exit', function ( exitCode ) {\n            cleanupTmpFile();\n\n            if ( exitCode === 0 ) {\n                say( 'Returning to parent gulpfile...' );\n            } else {\n                sayErr( util.format(\n                    'Gulpfile %s exited with an error :(',\n                    gutil.colors.magenta( gulpfile.path )\n                ) );\n            }\n\n            // Run the stream callback\n            callback();\n\n            // Run user callback\n            userCallback();\n        } );\n\n        // Clean up temp gulpfile if on ctrl + c\n        process.on( 'SIGINT', cleanupTmpFile );\n    } );\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-chug/node_modules/gulp-chug/gulpfile.js":"var gulp        = require( 'gulp' );\nvar istanbul    = require( 'gulp-istanbul' );\nvar mocha       = require( 'gulp-mocha' );\n\ngulp.task( 'test', function ( cb ) {\n  gulp.src( 'index.js' )\n    .pipe( istanbul() )\n    .pipe( istanbul.hookRequire() )\n        .on( 'finish', function () {\n          gulp.src( 'test/*-spec.js' )\n            .pipe( mocha() )\n            .pipe( istanbul.writeReports() )\n            .on( 'end', cb );\n        } );\n} );\n"}